openapi: 3.0.1
info:
  title: Fatbellies Restaurant
  description: Fatbellies Restaurant
  contact:
    email: bukhori.hutama@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: GitHub Page
  url: https://github.com/khorihutama/fatbellies
servers:
- url: https://fatbellies.herokuapp.com/api/v1
tags:  
- name: user
  description: Operations about user
- name: branch
  description: Access to Fatbellies Branch
- name: reservation
  description: Access to Fatbellies reservation
- name: session
  description: Access to Fatbellies List of session
- name: meal
  description: Access to Fatbellies List of meals

paths:
  /auth/signup:
    servers:
    - url: https://fatbellies.herokuapp.com
    post:
      tags:
      - user
      summary: Register user
      description: Register new user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: success login
        500:
          description: internal server error
        
  /auth/login:
    servers:
    - url: https://fatbellies.herokuapp.com/
    post:
      tags:
      - user
      summary: Login to the system
      description: Login using email & password.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: example@mail.com
                password:
                  type: string
                  example: password
              required:
                - email
                - password
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: example@mail.com
                password:
                  type: string
                  example: password
              required:
                - email
                - password
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        500:
          description: internal server error
  
  /meals:
    get:
      summary: List all meals
      description: List of all meals in the restaurants.
      security: 
      - bearerAuth: []
      tags:
      - meal
      responses:
        200:
          description: return meal
        401:
          description: unauthorized
        404:
          description: not found
        500:
          description: server error
    post:
      summary: Create new meals menu
      description: Add new meals menu
      security: 
      - bearerAuth: []
      tags: 
      - meal
      requestBody:
        description: Creating meals
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Meal'
        required: true
      responses:
        201:
          description: created
        401:
          description: unauthorized
        500:
          description: server error
  /meals/{id}:
    put:
      summary: Update meals
      description: Update existing meal in the system
      security: 
      - bearerAuth: []
      tags: 
      - meal
      parameters:
      - name: id
        in: path
        description: meal id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        description: Updating meal
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Meal'
        required: true
      responses:
        200:
          description: updated
        401:
          description: unauthorized
        404:
          description: not found
        500:
          description: server error
    delete:
      summary: Delete meal
      description: Delete meals in the system.
      security: 
      - bearerAuth: []
      tags: 
      - meal
      parameters:
      - name: id
        in: path
        description: meal id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: deleted
        401:
          description: unauthorized
        404:
          description: not found
        500:
          description: server error
          
  /branches:
    get:
      summary: List branch
      description: List all the branch.
      security: 
      - bearerAuth: []
      tags:
      - branch
      responses:
        200:
          description: return branch
        401:
          description: unauthorized
        404:
          description: not found
        500:
          description: server error
    post:
      summary: Create branch
      description: Add new branch
      security: 
      - bearerAuth: []
      tags: 
      - branch
      requestBody:
        description: Creating branch
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Branch'
        required: true
      responses:
        201:
          description: created
        401:
          description: unauthorized
        500:
          description: server error
  /branches/{id}:
    put:
      summary: Update branch
      description: Update existing branch.
      security: 
      - bearerAuth: []
      tags: 
      - branch
      parameters:
      - name: id
        in: path
        description: branch id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        description: Updating branch
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Branch'
        required: true
      responses:
        200:
          description: updated
        401:
          description: unauthorized
        404:
          description: not found
        500:
          description: server error
    delete:
      summary: Delete branch
      description: Delete branch in the system.
      security: 
      - bearerAuth: []
      tags: 
      - branch
      parameters:
      - name: id
        in: path
        description: branch id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: deleted
        401:
          description: unauthorized
        404:
          description: not found
        500:
          description: server error
  /sessions:
    get:
      summary: List session
      description: List of all available session.
      security: 
      - bearerAuth: []
      tags:
      - session
      responses:
        200:
          description: return session
        401:
          description: unauthorized
        404:
          description: not found
        500:
          description: server error
    post:
      summary: Create session
      description: Creating new session.
      security: 
      - bearerAuth: []
      tags: 
      - session
      requestBody:
        description: Create sessions
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Session'
        required: true
      responses:
        201:
          description: created
        401:
          description: unauthorized
        500:
          description: server error
  /sessions/filter:
     post:
      summary: Search session
      description: Search session based on following criteria.
      security: 
      - bearerAuth: []
      tags: 
      - session
      requestBody:
        description: Filter session
        content:
          'application/json':
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: branch name
                  example: Branch X
                date:
                  type: string
                  example: "2021-09-05"
                time:
                  type: string
                  example: '12:00:00'
                price: 
                  type: integer
                  example: 5
              required:
                - name
                - date
        required: true
      responses:
        200:
          description: return filtered session
        401:
          description: unauthorized
        500:
          description: server error
  /sessions/{id}:
    get:
      summary: Get session detail
      description: Show the detail of the session.
      security: 
      - bearerAuth: []
      tags: 
      - session
      parameters:
      - name: id
        in: path
        description: session id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: updated
        401:
          description: unauthorized
        404:
          description: not found
        500:
          description: server error
    put:
      summary: Update session
      description: Update existing session.
      security: 
      - bearerAuth: []
      tags: 
      - session
      parameters:
      - name: id
        in: path
        description: session id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        description: Updating session
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Session'
        required: true
      responses:
        200:
          description: updated
        401:
          description: unauthorized
        404:
          description: not found
        500:
          description: server error
    delete:
      summary: Delete session
      description: Removing registered session.
      security: 
      - bearerAuth: []
      tags: 
      - session
      parameters:
      - name: id
        in: path
        description: branch id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: deleted
        401:
          description: unauthorized
        404:
          description: not found
        500:
          description: server error
  /reservations:
    get:
      summary: List reservation 
      description: List of the reservation by all user.
      security: 
      - bearerAuth: []
      tags:
      - reservation
      responses:
        200:
          description: return list of reservation
        401:
          description: unauthorized
        404:
          description: not found
        500:
          description: server error
    post:
      summary: Create reservation
      description: Booking a new reservation .
      security: 
      - bearerAuth: []
      tags: 
      - reservation
      requestBody:
        description: Create new reservation
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Reservation'
        required: true
      responses:
        201:
          description: created
        401:
          description: unauthorized
        500:
          description: server error
  /reservations/{id}:
    get:
      summary: Get reservation detail
      description: Get reservation detail by id
      security: 
      - bearerAuth: []
      tags: 
      - reservation
      parameters:
      - name: id
        in: path
        description: reservation id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: return reservation by id
        401:
          description: unauthorized
        404:
          description: not found
        500:
          description: server error
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          example: Full name
        email:
          type: string
          example: example@name.com
        password:
          type: string
          example: password
        phone:
          type: string
          example: "08313131313"
        latitude:
          type: string
          example: -7.515498
        longitude:
          type: string
          example: 110.775709
      xml:
        name: User
    Meal:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          example: Buffet ABC
      xml:
        name: Meal
    Branch:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          example: Branch ABC
        latitude:
          type: string
          example: -7.515498
        longitude:
          type: string
          example: 110.775709
        openingHour:
          type: string
          example: "08.00 am - 10.00 pm"
      xml:
        name: Branch
    Session:
      type: object
      properties:
        id:
          type: integer
          format: int32
        price:
          type: integer
          format: int32
          example: 3
        maxCapacity:
          type: integer
          format: int32
          example: 10
        day:
          type: string
          enum: ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat']
          example: sun
        startTime:
          type: string
          example: "12:00:00"
        endTime:
          type: string
          example: "16:00:00"
        isOndemand:
          type: boolean
          example: false
        branchId:
          type: integer
          format: int32
          example: 1
        mealId:
          type: integer
          format: int32
          example: 1
      xml:
        name: Branch
    Reservation:
      type: object
      properties:
        id:
          type: integer
          format: int32
        date:
          type: string
          format: date
          example: "2021-09-05 12:00:00"
        branch:
          type: integer
          format: int32
          example: 1
      xml:
        name: Reservation
    
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
